# Makefile for uClibc
#
# Copyright (C) 2000-2005 Erik Andersen <andersen@uclibc.org>
#
# Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
#

CSRC-y := brk.c ioperm.c iopl.c __syscall_error.c sigaction.c

SSRC-y := \
	__longjmp.S setjmp.S bsd-setjmp.S \
	bsd-_setjmp.S sigrestorer.S \
	vfork.S clone.S mmap64.S

libc-nonshared-$(UCLIBC_HAS_THREADS_NATIVE) += $(ARCH_OUT)/libc-aeabi_read_tp.os
libc-static-$(UCLIBC_HAS_THREADS_NATIVE) += $(ARCH_OUT)/libc-aeabi_read_tp.o
CSRC-$(UCLIBC_HAS_CONTEXT_FUNCS) += makecontext.c
SSRC-$(UCLIBC_HAS_CONTEXT_FUNCS) += getcontext.S setcontext.S swapcontext.S

# Is our compiler set up for EABI ?
CC_IS_EABI_CHECK = $(filter-out -include libc-symbols.h,$(CC) $(CFLAGS))
$(eval $(call cache-output-var,IS_EABI,$(CC_IS_EABI_CHECK) -x c - -E -dM </dev/null 2>/dev/null | grep __ARM_EABI__ 2>&1 >/dev/null && echo 'y'))

CSRC-$(IS_EABI) += aeabi_assert.c aeabi_atexit.c aeabi_errno_addr.c \
	aeabi_localeconv.c aeabi_memclr.c aeabi_memcpy.c \
	aeabi_memmove.c aeabi_memset.c find_exidx.c find_got.c
SSRC-$(IS_EABI) += syscall-eabi.S
CSRC-$(if $(IS_EABI),,y)) += syscall.c
ARCH_OBJ_FILTEROUT-$(IS_EABI) := syscall.c
ifeq ($(IS_EABI),y)
CSRC-$(UCLIBC_HAS_WCHAR) += aeabi_mb_cur_max.c
endif

libc-static-$(IS_EABI) += $(addprefix $(ARCH_OUT)/, \
	aeabi_lcsts.o \
	aeabi_math.o \
	aeabi_sighandlers.o \
	)
libc-nonshared-$(IS_EABI) += $(addprefix $(ARCH_OUT)/, \
	aeabi_lcsts.os \
	aeabi_math.os \
	aeabi_sighandlers.os \
	aeabi_unwind_cpp_pr1.o \
	)
